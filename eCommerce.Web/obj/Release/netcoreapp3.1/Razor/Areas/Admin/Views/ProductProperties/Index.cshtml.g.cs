#pragma checksum "D:\eCommerce\eCommerce.Web\Areas\Admin\Views\ProductProperties\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "0aaf37def192f6dd5c354164e83554a3f3f5cc67"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Areas_Admin_Views_ProductProperties_Index), @"mvc.1.0.view", @"/Areas/Admin/Views/ProductProperties/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"0aaf37def192f6dd5c354164e83554a3f3f5cc67", @"/Areas/Admin/Views/ProductProperties/Index.cshtml")]
    public class Areas_Admin_Views_ProductProperties_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
            WriteLiteral("\r\n");
#nullable restore
#line 2 "D:\eCommerce\eCommerce.Web\Areas\Admin\Views\ProductProperties\Index.cshtml"
  
    ViewData["Title"] = "QUẢN LÝ THUỘC TÍNH SẢN PHẨM";
    Layout = "~/Areas/Admin/Views/Shared/_Layout.cshtml";

#line default
#line hidden
#nullable disable
            WriteLiteral(@"
<div class=""container"">
    <div class=""row"">
        <div class=""col-12"">
            <div class=""page-title-box"">
                <div class=""page-title-right"">
                    <div class=""button-list"">
                    </div>
                </div>
                <h4 class=""page-title"">Quản lý thuộc tính sản phẩm</h4>
            </div>
        </div>
    </div>
    <div class=""row"">
        <div class=""col-12"">
            <div class=""card"">
                <div class=""card-body"">
                    <div class=""page-aside-left p-0"">
                        <button onclick=""loadTong()"" type=""button"" class=""btn btn-block btn-primary""><i class=""mdi mdi-refresh font-16 mr-1""></i>Làm mới dữ liệu</button>
                    </div>
                    <div class=""page-aside-right"">
                        <ul class=""nav nav-tabs nav-bordered mb-3"">
                            <li class=""nav-item""><a href=""#tab-template"" data-toggle=""tab"" class=""nav-link active""><span>Tất cả thuộc");
            WriteLiteral(@" tính</span></a></li>
                            <li class=""nav-item""><a href=""#tab-properties"" data-toggle=""tab"" class=""nav-link""><span>Mẫu thuộc tính </span></a></li>
                        </ul>
                        <div class=""tab-content ml-3"">
                            <!-- -->
                            <div class=""tab-pane show active"" id=""tab-template"">
                                <div class=""row"">
                                    <div class=""col-12 text-right"">
                                        
                                    </div>
                                    <div class=""col-12 "">
                                        <h5 class=""text-primary"">Tìm tên thuộc tính</h5>
                                        <div class=""form-group"">
                                            <input type=""text"" class=""form-control"" id=""proper-name-search"" placeholder=""Nhập tên thuộc tính"" autocomplete=""off"" />
                                        </div>
           ");
            WriteLiteral(@"                         </div>
                                </div>
                                <div id=""tab_KJ"">

                                </div>

                            </div>
                            <!--  -->
                            <div class=""tab-pane "" id=""tab-properties"">
                                <div class=""mt-1"">
                                    <h5 class=""text-primary"">Tìm mẫu thuộc tính</h5>
                                    <div class=""form-group"">
                                        <input type=""text"" class=""form-control"" id=""template-name-search"" placeholder=""Nhập tên mẫu thuộc tính hoặc tên danh mục"" autocomplete=""off"" />
                                    </div>
                                </div>
                                <div id=""prop-tab"">

                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
    ");
            WriteLiteral(@"    </div>
    </div>
</div>

<!-- Modal add template Properties -->
<div id=""modal-add-template"" class=""modal"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"" id=""standard-modalLabel"">Thêm mẫu thuộc tính</h4>
                <button onclick=""resetFormTemplateProperties()"" type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">×</button>
            </div>
            <div class=""modal-body"">
                <div class=""row"">
                    <div class=""col-md-12"">
                        <div class=""form-group"">
                            <label>Tên mẫu thuộc tính  <span class=""text-danger"">*</span></label>
                            <input type=""text"" class=""form-control"" id=""template-name"" placeholder=""Nhập tên mẫu thuộc tính"" autocomplete=""off"" />
                        </div>
                    </div>
                    <div class=""col-md-12"">
                     ");
            WriteLiteral(@"   <div class=""form-group"">
                            <label>Danh sách thuộc tính</label>
                            <select id=""select-properties"" class=""form-control""></select>
                        </div>
                        <div id=""div-property-template-add"" class=""form-group""></div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button onclick=""resetFormTemplateProperties()"" type=""button"" class=""btn btn-light"" data-dismiss=""modal""><i class=""mdi mdi-close mr-1""></i>Đóng</button>
                <button onclick=""addTemplateProperties()"" type=""button"" class=""btn btn-primary""><i class=""mdi mdi-check mr-1""></i>Lưu mẫu thuộc tính</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal edit template -->
<div id=""modal-edit-template"" class=""modal"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title");
            WriteLiteral(@""" id=""standard-modalLabel"">Chỉnh sữa mẫu thuộc tính</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-hidden=""true"">×</button>
            </div>
            <div class=""modal-body"">
                <div class=""row"">
                    <div class=""col-md-12"">
                        <div class=""form-group"">
                            <label>Tên mẫu thuộc tính  <span class=""text-danger"">*</span></label>
                            <input type=""text"" class=""form-control"" id=""template-name-edit"" placeholder=""Nhập tên mẫu thuộc tính"" autocomplete=""off"" />
                        </div>
                    </div>
                    <div class=""col-md-12"">
                        <div class=""form-group"">
                            <label>Danh sách thuộc tính</label>
                            <select id=""select-properties-edit"" class=""form-control""></select>
                        </div>
                        <div id=""div-property-template-edit"" class=""form-g");
            WriteLiteral(@"roup""></div>
                    </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button id=""btn-detele"" type=""button"" class=""btn btn-danger m-w-100 mr-auto ml-1""><i class=""mdi mdi-trash-can mr-1""></i>Xoá</button>
                <button onclick=""resetFormTemplateProperties()"" id=""btn-close-edit"" type=""button"" class=""btn btn-light m-w-100"" data-dismiss=""modal""><i class=""mdi mdi-block-helper mr-1""></i>Đóng</button>
                <button id=""btn-edit"" type=""button"" class=""btn btn-primary ml-1""><i class=""mdi mdi-check mr-1""></i>Cập nhật</button>
            </div>
        </div>
    </div>
</div>
<!-- Modal add properties -->
<div id=""modal-add-properties"" class=""modal"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"" id=""standard-modalLabel"">Thêm thuộc tính</h4>
                <button onclick=""resetFormAdd()"" type=""button"" class=""close"" da");
            WriteLiteral(@"ta-dismiss=""modal"" aria-hidden=""true"">×</button>
            </div>
            
            <div class=""modal-body"">
                <div class=""row"">
                    <div class=""col-md-12"">
                       
                        <div class=""form-group"">
                            <label>Tên thuộc tính <span class=""text-danger"">*</span></label>
                            <input type=""text"" class=""form-control"" placeholder=""Nhập tên thuộc tính"" id=""proper"" autocomplete=""off"" />
                        </div>
                        <div class=""form-group"">
                            <label>Tên giá trị thuộc tính</label>
                            <input id=""ipt-value-add"" type=""text"" class=""form-control"" placeholder=""Nhập tên giá trị thuộc tính"" autocomplete=""off"" />
                        </div>
                        <div class=""col-md-12"">
                            <div id=""div-span-value-add"" class=""form-group""></div>
                        </div>
                  ");
            WriteLiteral(@"  </div>
                </div>
            </div>
            <div class=""modal-footer"">
                <button onclick=""resetFormAdd()"" type=""button"" class=""btn btn-light"" data-dismiss=""modal""><i class=""mdi mdi-close mr-1""></i>Đóng</button>
                <button onclick=""addProper()"" type=""button"" class=""btn btn-primary""><i class=""mdi mdi-check mr-1""></i>Lưu thuộc tính</button>
            </div>
        </div>
    </div>
</div>

");
#nullable restore
#line 170 "D:\eCommerce\eCommerce.Web\Areas\Admin\Views\ProductProperties\Index.cshtml"
Write(await Html.PartialAsync("DetailsPropertiesPartial"));

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n\r\n");
            DefineSection("Scripts", async() => {
                WriteLiteral(@"
    <script>
        $(function () {
            loadPropertyApha()
            loadTemPlate()
            initSelect({
                Element: '#select-properties-edit',
                Url: URL_BASE.Property,
                Value: 'PropertyName',
                Id: 'Id'
            })
            initProductCategory('#select-categories-edit')
            initProductCategory('#select-categories')
            initProductCategory('#select-categories-properties')
            initProductCategory('#select-categories-properties-edit')
            //search template names
            $(""#template-name-search"").keyup(function () {
                delay(function () {
                    loadTemPlate();
                }, 250);
            });
            //search properties names
            $(""#properties-name-search"").keyup(function () {
                delay(function () {
                    loadTemPlate();
                }, 250);
            });

            //search properties nam");
                WriteLiteral(@"es
            $(""#proper-name-search"").keyup(function () {
                delay(function () {
                    searchProperties();
                }, 250);
            });
        })
        /** Binding event add value property */
        $('#ipt-value-add').on('keydown', function (e) {
            let $this = $(this);
            let value = $this.val();
            if (e.keyCode == 13) {
                if (value.length > 0) {
                    let isExist = false;
                    $('#div-span-value-add').find('span').each(function () {
                        let spanValue = $(this).attr('data-value');
                        if (value == spanValue) {
                            alertify.alert('Tên giá trị thuộc tính đã tồn tại');
                            isExist = true;
                            return false;
                        }
                    })
                    if (!isExist) {

                        let html = `<span data-value=""${value}"" class=""ba");
                WriteLiteral(@"dge badge-primary-lighten"">${value} <i onclick=""del(this)"" style=""cursor:pointer"" class=""mdi mdi-close text-danger""></i></span>`;
                        $('#div-span-value-add').append(html);
                        let dataValue_ = {
                            PropertyId: 0,
                            Value: value
                        }
                        ArrayValueProperties.push(dataValue_)
                        ajaxPost(""Value/Mutile"", ArrayValueProperties, function (res) {
                            if (res.IsSuccess) {
                                ArrayValuePropertiesIds = res.Result
                            }
                            else {
                                alertify.alert(res.Message)
                            }
                        })
                    }
                    $this.val('');
                }
            }
        })
        function del(e) {
            let span = $(e.closest('span'));
            let val = span.data('va");
                WriteLiteral(@"lue');
            let index = ArrayValueProperties.findIndex(sp => sp.Value == val);
            if (index != -1) {
                ArrayValueProperties.splice(index, 1)
            }
            ajaxPost(""Value/Mutile"", ArrayValueProperties, function (res) {
                if (res.IsSuccess) {
                    ArrayValuePropertiesIds = res.Result
                }
                else {
                    alertify.alert(res.Message)
                }
            })
            span.remove();
        }
        let ArrayValuePropertiesIds = []
        let ArrayValueProperties = []
        let ArrayCategoriesIds = []
        let ArrayPropertiesEdit = []
        let ArrayPropertiesEditId = []
        let ArrayPropertyValueModalEdit = []
        let ArrayPropertyIdModalEdit = []
        let categoriesId
        let categoriesIdEdit
        let categoriesIdAddTemplate
        let categoriesIdEditTemplate
        let item
        //loadTong
        function loadTong() {
          ");
                WriteLiteral(@"  loadPropertyApha()
            loadTemPlate()
        }
        //resetFormADdTemplateProperties
        function resetFormTemplateProperties() {
            $(""#select-properties"").html('')
            $(""#template-name"").val('');
            $('#select-categories').val('0').trigger('change')
            $(""#div-property-template-add"").html("""")
            ArrayCategoriesIds = []
            categoriesIdAddTemplate = ''
        }
        //removes the duplicate element
        function unique(arr) {
            var newArr = []
            for (var i = 0; i < arr.length; i++) {
                if (newArr.indexOf(arr[i]) === -1) {
                    newArr.push(arr[i])
                }
            }
            return newArr
        }
        /** Binding event select properties */
        $('#select-properties').on('select2:select', function (e) {
            let id = Number(e.params.data.id);
            let text = e.params.data.text;
            
            let isSS = true
  ");
                WriteLiteral(@"          ArrayCategoriesIds.push(id)
            ArrayCategoriesIds = unique(ArrayCategoriesIds)
            $('#div-property-template-add').find('span').each(function () {
                let spanId = $(this).attr('data-id');
                if (id == spanId) {
                    alertify.alert('Tên thuộc tính đã tồn tại');
                    isSS = false
                    $('#select-properties').select2('close');
                    return false
                }
            })
            if (isSS) {
                let html = `<span data-id=""${id}"" class=""badge badge-primary-lighten"">${text} <i onclick=""detelePropertiesAdd(this)"" style=""cursor:pointer"" class=""mdi mdi-close text-danger""></i></span> `;
                $('#div-property-template-add').append(html);
                $('#select-properties').select2('open');
            }
        })
        //detelePropertiesAdd
        function detelePropertiesAdd(e) {
            let span = $(e.closest('span'));
            let id = spa");
                WriteLiteral(@"n.data('id');
            let index = ArrayCategoriesIds.findIndex(sp => sp == id);
            if (index != -1) {
                ArrayCategoriesIds.splice(index, 1)
            }
            span.remove();
            $.each(ArrayCategoriesIds, (index, item) => {
                if (id == item) {
                    ArrayCategoriesIds.slice(index, 1);
                }
            });
            if (ArrayCategoriesIds.length == 0) {
                $('#select-properties').val('0').trigger('change')
            }
            $('#select-properties').val('0').trigger('change')
        }
        /** Binding event select properties edit*/
        $('#select-properties-edit').on('select2:select', function (e) {
            let id = e.params.data.id;
            let text = e.params.data.text;
            let isSS = true
            let html = ''

            $('#div-property-template-edit').find('span').each(function () {
                let spanId = $(this).attr('data-id');
               ");
                WriteLiteral(@" if (id == spanId) {
                    alertify.alert('Tên thuộc tính đã tồn tại');
                    isSS = false
                    $('#select-properties-edit').select2('close');
                    return false
                }
            })
            if (isSS) {
                let data = {
                    Id: id,
                    PropertyName: text
                }


                let index = ArrayPropertiesEdit.findIndex(sp => sp.Id == id)
                if (index == -1) {
                    ArrayPropertiesEdit.push(data)

                }
                $.each((ArrayPropertiesEdit), function (index, item) {
                    html += `<span data-id=""${item.Id}"" class=""badge badge-primary-lighten "">${item.PropertyName} <i onclick=""detelePropertiesItem(${item.Id})"" class=""mdi mdi-close text-danger cursor-pointer""></i></span>`
                })
                $('#div-property-template-edit').html(html);

                $('#select-properties-edit').select2");
                WriteLiteral(@"('open');
            }

        })
        $('#select-categories-properties').on('select2:select', function (e) {
            let id = e.params.data.id;
            let text = e.params.data.text;
            categoriesId = id
        })
        $('#select-categories-properties-edit').on('select2:select', function (e) {
            let id = e.params.data.id;
            let text = e.params.data.text;

            categoriesIdEdit = id
        })
        $('#select-categories').on('select2:select', function (e) {
            let id = e.params.data.id;
            let text = e.params.data.text;
            categoriesIdAddTemplate = id
        })
        $('#select-categories-edit').on('select2:select', function (e) {
            let id = e.params.data.id;
            let text = e.params.data.text;
            categoriesIdEditTemplate = id
        })
        //searchProperties
        function searchProperties() {
            let key = $('#proper-name-search').val()

            if (");
                WriteLiteral(@"key == '') {
                loadPropertyApha()
            }
            else {
                ajaxGet(`Property?keyword=${key}`, {}, function (res) {
                    if (res.IsSuccess) {
                        let data = res.Result
                        let html = '';
                        $.each(data, function (index, item) {
                            html += `<h5 class=""mt-3"">${item.CategoryName}</h5>`;
                            html += `<span style=""cursor:pointer"" onclick=""showDetailsProperty(${item.Id})"" class=""badge badge-primary-lighten"">${item.PropertyName}</span>
`;
                        })
                        $('#tab_KJ').html(html)
                        if (data.length == 0) {
                            $('#tab_KJ').html(`
                        <table class=""table table-hover table-centered"">
                            <thead>
                                <tr></tr>
                                <tr></tr>
                                <tr></tr>");
                WriteLiteral(@"
                                <tr></tr>
                                <tr></tr>
                            </thead>
                            <tbody>
                                    ${ htmlEmptyTable(5)}
                            </tbody>
                        </table>
                                `) 
                        }
                    }
                    else {
                        alertify.alert(res.Message)

                    }
                })

            }
        }
        //loadtemplate
    function loadTemPlate() {
            let keyTemplate = $(""#template-name-search"").val();
            ajaxGet(`Template?keyword=${keyTemplate}`, {}, function (res) {
                if (res.IsSuccess) {
                    let data = res.Result
                    let html = ''
                    $.each(data, function (index, item) {
                        html += `
                                <div class=""mt-2"">
                               ");
                WriteLiteral(@"     <a class=""text-dark collapsed"" data-toggle=""collapse"" href=""#${item.FriendlyUrl}"">
                                        <p class=""m-0 font-weight-bold""><i class=""uil uil-angle-down font-18""></i>${item.CategoryName}<span class=""text-muted""></span></p>
                                    </a>
                                    <div class=""collapse ml-4 mt-1"" id=""${item.FriendlyUrl}"">
                                        ${renderProperty(item.Templates)}
                                        <button onclick=""showOpenModal(${item.Id},'${item.CategoryName}')"" type=""button"" class=""btn btn-primary btn-sm""><i class=""mdi mdi-plus-circle font-16 mr-1""></i>Thêm mới mẫu thuộc tính</button>
                                    </div>
                                </div>
                                `;
                    })
                    let $tabTemplate = $(""#prop-tab"");
                    if (html == '') {
                        $tabTemplate.html(
                            ` <tab");
                WriteLiteral(@"le class=""table table-hover table-centered"">
                            <thead>
                                <tr></tr>
                                <tr></tr>
                                <tr></tr>
                                <tr></tr>
                                <tr></tr>
                            </thead>
                            <tbody>
                                    ${ htmlEmptyTable(5)}
                            </tbody>
                        </table>
                        `
                           )
                    } else {
                        $tabTemplate.html(html)
                    }
                }
                else {
                    alertify.alert(res.Message)
                }
            })

            function renderProperty(data) {
                let html = '';

                $.each(data, function (index, item) {
                    html += `<div onclick=""showModalPropertiesTemplate(${item.Id})"" class=""justify");
                WriteLiteral(@"-content-sm-between""><p class=""cursor-pointer"">${item.PropertyTemplateName} (${item.Properties.length} thuộc tính)</p></div>`;
                })
                return html;
            }
        }
        function showOpenModal(cateId, categories) {
            ajaxGet('ProductCategory', {}, function (res) {
                if (res.IsSuccess) {
                    item = res.Result.find((sp) => sp.CategoryName == categories)
                    categoriesIdAddTemplate = item.Id

                    initSelect({
                        Element: '#select-properties',
                        Url: URL_BASE.Property + ""/ByCategory/"" + categoriesIdAddTemplate,
                        Value: 'PropertyName',
                        Id: 'Id'
                    }, false, function (res) {
                        $('#select-properties').val('0').trigger('change')
                    })

                }
                else {
                    
                }
            })
            $");
                WriteLiteral(@"('#select-properties').html("""");
            showModal('#modal-add-template')
        }
        //showEditPropertiesTemplate
        async function showModalPropertiesTemplate(id) {
            $('#select-properties-edit').val('0').trigger('change')
            $('#div-property-template-edit').html("""");
            showModal(""#modal-edit-template"")
            ajaxGet(`Template/${id}`, {}, function (res) {
                //console.log(res)
                if (res.IsSuccess) {
                    $(""#btn-edit"").attr('onclick', `update(${id})`);
                    $(""#btn-detele"").attr('onclick', `detele(${id})`);
                    let data = res.Result
                    $('#template-name-edit').val(data.PropertyTemplateName)

                    categoriesIdEditTemplate = data.CategoryId
                    initSelect({
                        Element: '#select-properties-edit',
                        Url: URL_BASE.Property + ""/ByCategory/"" + categoriesIdEditTemplate,
               ");
                WriteLiteral(@"         Value: 'PropertyName',
                        Id: 'Id'
                    }, false, function () {
                        $('#select-properties-edit').val('0').trigger('change')
                    })
                    let html = ''
                    ArrayPropertiesEdit = data.Properties
                    ArrayPropertiesEditId = ArrayPropertiesEdit.map((sp) => {
                        return sp.Id
                    })
                    $.each((ArrayPropertiesEdit), function (index, item) {
                        html += `<span data-id=""${item.Id}"" class=""badge badge-primary-lighten "">${item.PropertyName} <i onclick=""detelePropertiesItem(${item.Id})"" class=""mdi mdi-close text-danger cursor-pointer""></i></span>`
                    })
                    $('#div-property-template-edit').append(html);
                }
                else {
                    alertify.alert(res.Message)
                }
            })

        }
        //renderHtmlCategories
     ");
                WriteLiteral(@"   function rendeHtmlCategories(idCategories) {
            let array = []
            let html = ``
            ajaxGet('ProductCategory', {}, function (res) {
                if (res.IsSuccess) {
                    let data = res.Result
                    for (var i = 0; i < data.length; i++) {
                        let item = data[i]
                        if (idCategories == item.Id) {
                            html += `<option value='${item.Id}'>${item.CategoryName} </option>`
                        }
                    }
                }
                else {
                    alertify.alert(res.Message)
                }
            }, () => { }, false)
            return html;
        }
        //update template
        function update(id) {
            
                let data = {
                    CategoryId: categoriesIdEditTemplate,
                    PropertyTemplateName: $(""#template-name-edit"").val(),
                    PropertyIds: ArrayPropertiesEdit");
                WriteLiteral(@".map((sp) => {
                        return Number(sp.Id)
                    })
                }
                ajaxPut(`Template/${id}`, data, function (res) {
                    if (res.IsSuccess) {
                        alertify.success('Cập nhật thành công');

                        hideModal(""#modal-edit-template"")
                        loadTemPlate()
                    }
                    else {
                        alertify.alert(res.Message)
                    }

                })
        }
        //detele template
        function detele(id) {
            alertify.confirm(""Bạn có chắc xóa mẫu thuộc tính này"",
                function () {
                    ajaxDelete(`Template/${id}`, function (res) {
                        if (res.IsSuccess) {
                            alertify.success('Xóa thành công');
                            hideModal(""#modal-edit-template"")
                            loadTemPlate()
                        }
               ");
                WriteLiteral(@"         else {
                            alertify.alert(res.Message)
                        }
                    })
                });
        }
        //detelePropertiesTemplate
        function detelePropertiesItem(id) {
            let index = ArrayPropertiesEdit.findIndex(sp => sp.Id == id)
            let html = ''
            ArrayPropertiesEdit.splice(index, 1)
            $.each((ArrayPropertiesEdit), function (index, item) {
                html += `<span data-id=""${item.Id}"" class=""badge badge-primary-lighten "">${item.PropertyName} <i onclick=""detelePropertiesItem(${item.Id})"" class=""mdi mdi-close text-danger cursor-pointer""></i></span>`
            })
            $('#div-property-template-edit').html(html);
            if (ArrayPropertiesEdit.length == 0) {
                $('#select-properties-edit').val('0').trigger('change')
            }
            $('#select-properties-edit').val('0').trigger('change')

        }
        //loadProperties
        function loadPrope");
                WriteLiteral(@"rtyApha() {
            ajaxGet(""ProductCategory"", {}, function (res) {
                if (res.IsSuccess) {
                    let data = res.Result
                    let html = '';
                    $.each(data, function (index, item) {
                        html += `<h5 class=""mt-3"">${item.CategoryName} <small>(${item.Properties.length} thuộc tính)</small></h5>`;
                        $.each(item.Properties, function (id, it) {
                            html += `<span style=""cursor:pointer"" onclick=""showDetailsProperty(${it.Id})"" class=""badge badge-primary-lighten"">${it.PropertyName}</span>`;
                        })
                        html += `<br /><button onclick=""openModalAddProperty(${item.Id})"" type=""button"" class=""btn btn-primary btn-sm m-1""><i class=""mdi mdi-plus-circle font-16 mr-1""></i>Thêm mới thuộc tính</button>`

                    })

                    $('#tab_KJ').html(html)
                } else {
                    alertify.alert(res.Message)
       ");
                WriteLiteral(@"         }
            })
        }
        //showDetailsProperty
        function showDetailsProperty(id) {
            showModal(""#modal-edit"")
            ajaxGet(`Property/${id}`, {}, function (res) {
                if (res.IsSuccess) {
                    let html = ''
                    $(""#proper-edit"").val(res.Result.PropertyName)
                    categoriesIdEdit = res.Result.CategoryId
                    $('#select-categories-properties-edit').val(res.Result.CategoryId).trigger('change')
                    ArrayPropertyValueModalEdit = res.Result.Values

                    ArrayPropertyIdModalEdit = ArrayPropertyValueModalEdit.map((sp) => {
                        return sp.Id
                    })
                    $.each(ArrayPropertyValueModalEdit, function (index, item) {
                        html += `<span data-value=""${item.Value}"" class=""badge badge-primary-lighten""> ${item.Value}<i onclick=""delValmodalEdit(this)"" style=""cursor:pointer"" class=""mdi mdi-close tex");
                WriteLiteral(@"t-danger""></i></span>`
                    })
                    $('#div-span-value-edit').html(html)
                }
                else {
                    alertify.alert(res.Message)
                }
            })
            $('#ipt-value-edit').on('keydown', function (e) {
                let $this = $(this);
                let value = $this.val();
                if (e.keyCode == 13) {
                    if (value.length > 0) {
                        let isExist = false;
                        $('#div-span-value-edit').find('span').each(function () {
                            let spanValue = $(this).attr('data-value');
                            if (value == spanValue) {
                                alertify.alert('Tên thuộc tính đã tồn tại');
                                isExist = true;
                                return false;
                            }
                        })
                        if (!isExist) {

                            le");
                WriteLiteral(@"t html = `<span data-value=""${value}"" class=""badge badge-primary-lighten"">${value} <i onclick=""delValmodalEdit(this)"" style=""cursor:pointer"" class=""mdi mdi-close text-danger""></i></span>`;
                            $('#div-span-value-edit').append(html);

                            let dataValue__ = {
                                Id: 0,
                                Note: 'string',
                                PropertyId: 0,
                                Value: value
                            }
                            ArrayPropertyValueModalEdit.push(dataValue__)


                            ajaxPost(""Value/Mutile"", ArrayPropertyValueModalEdit, function (res) {
                                if (res.IsSuccess) {
                                    ArrayPropertyIdModalEdit = res.Result

                                }
                                else {
                                    alertify.alert(res.Message)
                                }
               ");
                WriteLiteral(@"             })



                        }
                        $this.val('');
                    }
                }
            })

            $('#btn-edit-branch').attr('onclick', `updateProperties(${id})`);
            $('#btn-delete-branch').attr('onclick', `deteleProperty(${id})`);

        }
        function resetInput() {
            $('#ipt-value-edit').val('')
        }
        function delValmodalEdit(e) {
            let span = $(e.closest('span'));
            let val = span.data('value');
            let index = ArrayPropertyValueModalEdit.findIndex(sp => sp.Value == val);
            if (index != -1) {
                ArrayPropertyValueModalEdit.splice(index, 1)
                ArrayPropertyIdModalEdit = ArrayPropertyValueModalEdit.map((sp) => {
                    return sp.Id
                })
            }
            ajaxPost(""Value/Mutile"", ArrayPropertyValueModalEdit, function (res) {
                if (res.IsSuccess) {
                    ArrayProper");
                WriteLiteral(@"tyIdModalEdit = res.Result
                }
                else {
                    alertify.alert(res.Message)
                }
            })

            span.remove();

        }
        //updatePropertiesValue
        function updateProperties(id) {
            if ($('#select-categories-properties-edit').val() == null) {
                alertify.alert(""Hảy chọn danh mục"")
            }
            else {
                let data = {
                    PropertyName: $(""#proper-edit"").val(),
                    CategoryId: Number(categoriesIdEdit),
                    ValueIds: ArrayPropertyIdModalEdit
                }
                ajaxPut(`Property/${id}`, data, function (res) {
                    if (res.IsSuccess) {
                        alertify.success('Cập nhật thành công');
                        loadPropertyApha()
                        $('#proper-name-search').val('')
                        hideModal(""#modal-edit"")
                    }
                 ");
                WriteLiteral(@"   else {
                        alertify.alert(res.Message)
                    }

                })
            }
           
        }
        //deteleProperty
        function deteleProperty(id) {
            alertify.confirm(""Bạn có chắc xóa thuộc tính này"",
                function () {
                    ajaxDelete(`Property/${id}`, function (res) {
                        if (res.IsSuccess) {
                            loadPropertyApha()
                            hideModal(""#modal-edit"")
                            alertify.success('Xóa thành công');
                        }
                        else {
                            alertify.alert(res.Message)
                        }
                    })
                });


        }
        //addProperti
        function addProper() {
                let data = {
                    Id: 0,
                    PropertyName: $(""#proper"").val(),
                    CategoryId: Number(categoriesId),
          ");
                WriteLiteral(@"          ValueIds: ArrayValuePropertiesIds
                }
                ajaxPost(""Property"", data, function (res) {
                    if (res.IsSuccess) {
                        alertify.success('Thêm thành công');
                        loadPropertyApha()
                        resetFormAdd()
                        $('#proper-name-search').val('')
                        hideModal(""#modal-add-properties"")
                    }
                    else {

                        alertify.alert(res.Message)
                    }
                })
        }
        //resetform add
        function resetFormAdd() {
            ArrayValueProperties = []
            $(""#proper"").val('')
            $(""#ipt-value-add"").val('')
            $('#div-span-value-add').html('');
            $('#select-categories-properties').val('0').trigger('change')

        }
        function openModalAddProperty(id) {
            categoriesId = id
            showModal('#modal-add-properties')");
                WriteLiteral(@"
            ArrayValuePropertiesIds = [];
            $('#select-categories-properties').val('0').trigger('change')

        }
        //addTemplateProperties
        function addTemplateProperties() {
                let data = {
                    PropertyTemplateName: $(""#template-name"").val(),
                    CategoryId: categoriesIdAddTemplate,
                    PropertyIds: ArrayCategoriesIds
                }
                ajaxPost(""Template"", data, function (res) {
                    if (res.IsSuccess) {
                        alertify.success('Thêm thành công');
                        loadTemPlate()
                        resetFormTemplateProperties()
                        hideModal(""#modal-add-template"")
                    }
                    else {
                        alertify.alert(res.Message)
                    }
                })
        }
        //loadProperties
        function loadProperties() {
            ajaxGet(""Property"", {}, function (");
                WriteLiteral(@"res) {
                if (res.IsSuccess) {
                    let data = res.Result
                    let html = ''
                    $.each(data, function (index, item) {
                        html += `
                                                       <option value=""${item.Id}"">${item.PropertyName}</option>
                                                    `
                    })
                    $(""#select-properties"").html(html)
                }
                else {

                    alertify.alert(res.Message)
                }
            })

        }
    </script>
");
            }
            );
            WriteLiteral(" ");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
